function consolelogger(varargin)
%CONSOLELOGGER Control side logging of the console I/O.
%
%   CONSOLELOGGER('start')
%   CONSOLELOGGER('stop') These operations start and stop the logger as its
%   description.
%   CONSOLELOGGER(..., PATH) assign the log file to a specified path.
%   Default filename is 'yyyy-MM-dd-HH-mm-ss.txt' generated by the
%   TIMESTAMP function.
%
%   Parameters
%   ----------
%   'Mode'  Control the operation mode when designated log file already
%           exists. There are two possible options: 'Overwrite' and
%           'Append', while 'Overwrite' is the default value.
%
%   Note
%   ----
%   File is deleted first if overwrite mode is selected, so CONSOLELOGGER
%   cannot guarantee the validity of target file since the operation is not
%   atomic.
%
%   See also: TIMESTAMP

p = inputParser;
addRequired(p, 'Op');
% default filename is 'yyy-MM-dd-HH-mm-ss.txt'
addOptional(p, 'Path', [matlab.timestamp, '.txt'], @(f) (ischar(f)));
% default is behavior is overwrite instead of append
addParameter(p, 'Mode', 'Overwrite', @validateMode);
parse(p, varargin{:});
 
op = p.Results.Op;
if strcmp(op, 'start')
    % ensure no on-going diary operation
    if strcmp(get(0, 'Diary'), 'on')
        warning('util:consolelogger', 'Logging is already enabled.');
        return;
    end
    
    path = p.Results.Path;
    mode = p.Results.Mode;
    if strcmp(mode, 'Overwrite')
        if exist(path, 'file')
            delete(path);
        end
    end
    diary(path);
elseif strcmp(op, 'stop')
    diary('off');
else
    error('util:consolelogger', 'Unknown operation.');
end

end

function b = validateMode(m)

b = strcmp(m, 'Overwrite') || strcmp(m, 'Append');

end
