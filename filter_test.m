function filter_test

close all;

imgPath = 'data/local_seg_test/dense.tif';

%% Load the image.
[oriImgStack, imgStackSize] = tiff.imread(imgPath, true);


oriImg = oriImgStack(:, :, 14);
oriImg = single(oriImg);
% oriImg = oriImg(150:500, 100:350);

fltImg_1 = wiener2(oriImg, [5, 5]);
fltImg_2 = func_denoise_dw2d(oriImg);

h = figure('Name', 'Result', 'NumberTitle', 'off');

r = 1;
type = 'k.';

subplot(1, 3, 1);
imagesc(oriImg);
axis equal tight;
title('Original');
p = FastPeakFind(oriImg);
col = p(1:2:end);
row = p(2:2:end);
hold on;
scatter(col, row, r, type);
        
subplot(1, 3, 2);
imagesc(fltImg_1);
axis equal tight;
title('Weiner');
p = FastPeakFind(fltImg_1);
col = p(1:2:end);
row = p(2:2:end);
hold on;
scatter(col, row, r, type);

subplot(1, 3, 3);
imagesc(fltImg_2);
axis equal tight;
title('DWT denoise');
p = FastPeakFind(fltImg_2);
col = p(1:2:end);
row = p(2:2:end);
hold on;
scatter(col, row, r, type);

end

function [XDEN,cfsDEN,dimCFS] = func_denoise_dw2d(X)
% FUNC_DENOISE_DW2D Saved Denoising Process.
%   X: matrix of data
%   -----------------
%   XDEN: matrix of denoised data
%   cfsDEN: decomposition vector (see WAVEDEC2)
%   dimCFS: corresponding bookkeeping matrix

%  Auto-generated by Wavelet Toolbox on 26-Aug-2016 17:14:46

% Analysis parameters.
%---------------------
wname = 'sym6';
level = 2;

% Denoising parameters.
%-----------------------
% meth = 'sqrtbal_sn';
% scal_OR_alfa = one;
sorh = 's';    % Specified soft or hard thresholding
thrSettings =  [...
    14.882939856329342     14.882939856329342 ; ...
    61.577863646972794     57.679169036040989 ; ...
    14.882939856329342     14.882939856329342   ...
    ];
roundFLAG = true;

% Denoise using WDENCMP.
%----------------------
[coefs,sizes] = wavedec2(X,level,wname);
[XDEN,cfsDEN,dimCFS] = wdencmp('lvd',coefs,sizes, ...
    wname,level,thrSettings,sorh);
if roundFLAG , XDEN = round(XDEN); end
if isequal(class(X),'uint8') , XDEN = uint8(XDEN); end

end