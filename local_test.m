function local_test

imgPath = 'data/local_seg_test/sparse.tif';

%% Load the image.
[oriImgStack, imgStackSize] = tiff.imread(imgPath, true);
imgStackSize

splImg = oriImgStack(:, :, 14);

weiImg = wiener2(single(splImg), [5, 5]);
figure; imagesc(weiImg);

%% Process
% mask = ones(5);
% mask(13) = 0;

    function [col, row, fltImg] = process(in)
        %fltImg = ordfilt2(in, 24, mask);
        
        sglImg = single(in);
        fltImg = func_denoise_dw2d(sglImg);
        fltImg = fltImg / max(fltImg(:)) * 65535;
        fltImg = uint16(fltImg);
        
        p = FastPeakFind(fltImg);
        col = p(1:2:end);
        row = p(2:2:end);
        
        % newImg = imfuse(oriImg, mrkImg);

        % %% Watershed segmentation.
        % newImg = watershed(oriImg);
        % newImg = label2rgb(newImg, 'jet', [.5, .5, .5]);
    end

% %% Show the result.
% close all;
% 
% % Center and enlarge the figure.
% h = figure;
% centerfigure(imgSize);
% 
% % Plot the results.
% subplot(1, 2, 1);
% imagesc(oriImg);
% title('Before');
% axis equal tight;
% 
% subplot(1, 2, 2);
% imagesc(newImg);
% title('After');
% axis equal tight;
% hold on;
% scatter(col, row, 5, 'kx');

%% Configure KeyPressFcn on active figure.
disp('Process complete, rendering layers...');

close all;
h = figure('Name', 'Result', 'NumberTitle', 'off');
centerfigure(h, imgStackSize);

currIdx = 1;
prevIdx = -1;

    function keyPressEvent(~, event)
    %%KEYPRESSEVENT Handle the keypress event generated by user key input.

    switch(event.Key)
        case {'q', 'Q'}
            % Quit
            currIdx = -1;
        case {'w', 'W'}
            % Previous
            currIdx = currIdx-1;
        case {'s', 'S'}
            % Next
            currIdx = currIdx+1;
    end

    end
set(gcf, 'KeyPressFcn', @keyPressEvent);

while currIdx <= imgStackSize(3)
    if (currIdx < 0) || ~ishandle(h)
        break;
    end
    
    if prevIdx ~= currIdx
%         j = oriImg(:, :, currIdx);
%         imagesc(j);
%         axis equal tight;
        
        currImg = oriImgStack(:, :, currIdx);
        
        % Original image.
        subplot(1, 3, 1);
        imagesc(currImg);
        title('Original');
        axis equal tight;
        
        % Filtered image.
        tic;
        [col, row, fltImg] = process(currImg);
        tElapsed = toc(tic);
        fprintf('%f seconds to segment the peaks\n', tElapsed);
        subplot(1, 3, 2);
        imagesc(fltImg);
        title('Filtered');
        axis equal tight;
        
        % Overlay.
        subplot(1, 3, 3);
        imagesc(fltImg);
        title('Overlayed');
        axis equal tight;
        hold on;
        scatter(col, row, 3, 'w+');

        % Draw immediately.
        drawnow;
        
        % Update the window title.
        set(gcf, 'Name', ['Layer ', num2str(currIdx)]);
        prevIdx = currIdx;
    end
    
    pause(0.25);
end

disp('... stopped');

end

function centerfigure(h, csize)
%CENTERFIGURE Center the figure window.
%   CENTERFIG(H, CSIZE) center the figure that H points to according to its
%   content size CSIZE.

scnSize = get(0, 'ScreenSize');
scnSize = scnSize(3:4);
figSize = [csize(2)*3, csize(1)];
figPos = (scnSize-figSize)/2;
set(h, 'Position', [figPos, figSize]);

end

function [XDEN,cfsDEN,dimCFS] = func_denoise_dw2d(X)
% FUNC_DENOISE_DW2D Saved Denoising Process.
%   X: matrix of data
%   -----------------
%   XDEN: matrix of denoised data
%   cfsDEN: decomposition vector (see WAVEDEC2)
%   dimCFS: corresponding bookkeeping matrix

%  Auto-generated by Wavelet Toolbox on 26-Aug-2016 17:14:46

% Analysis parameters.
%---------------------
wname = 'sym6';
level = 2;

% Denoising parameters.
%-----------------------
% meth = 'sqrtbal_sn';
% scal_OR_alfa = one;
sorh = 's';    % Specified soft or hard thresholding
thrSettings =  [...
    14.882939856329342     14.882939856329342 ; ...
    61.577863646972794     57.679169036040989 ; ...
    14.882939856329342     14.882939856329342   ...
    ];
roundFLAG = true;

% Denoise using WDENCMP.
%----------------------
[coefs,sizes] = wavedec2(X,level,wname);
[XDEN,cfsDEN,dimCFS] = wdencmp('lvd',coefs,sizes, ...
    wname,level,thrSettings,sorh);
if roundFLAG , XDEN = round(XDEN); end
if isequal(class(X),'uint8') , XDEN = uint8(XDEN); end

end
